datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma-client"
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(uuid())
  name          String?
  lastName      String?   @map("last_name")
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Profile   Profile?
  Post      Post[]
  Comment   Comment[]
  Reaction  Reaction[]
  isActive  Boolean    @default(false) @map("is_active")
  role      Role       @map("role")

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Profile {
  id     String  @id @default(uuid())
  avatar String?
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique @map("user_id")

  @@map("profiles")
}

model Post {
  id        String     @id @default(uuid())
  content   String?
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String     @map("author_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  comments  Comment[]
  Reaction  Reaction[]

  @@map("posts")
}

model Comment {
  id        String     @id @default(uuid())
  text      String?
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String     @map("author_id")
  post      Post       @relation(fields: [postId], references: [id])
  postId    String     @map("post_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  reactions Reaction[]

  @@map("comments")
}

enum ReactionType {
  LIKE
  DISLIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}

model Reaction {
  id        String       @id @default(uuid())
  type      ReactionType @map("type")
  user      User         @relation(fields: [userId], references: [id])
  userId    String       @map("user_id")
  post      Post         @relation(fields: [postId], references: [id])
  postId    String       @map("post_id")
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  Comment   Comment?     @relation(fields: [commentId], references: [id])
  commentId String?

  @@map("reactions")
}
