// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma-client"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  emailVerified DateTime?  @map("email_verified")
  name          String
  lastName      String     @map("last_name")
  password      String
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  isActive      Boolean    @default(true) @map("is_active")
  role          Role       @default(USER)
  Profile       Profile?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Comment       Comment[]
  Reaction      Reaction[]

  @@map("users")
}

model Profile {
  id     String  @id @default(uuid())
  avatar String?
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique @map("user_id")

  @@map("profiles")
}

model Post {
  id        String     @id @default(uuid())
  content   String?
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String     @map("author_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  comments  Comment[]
  Reaction  Reaction[]

  @@map("posts")
}

model Comment {
  id        String     @id @default(uuid())
  text      String?
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String     @map("author_id")
  post      Post       @relation(fields: [postId], references: [id])
  postId    String     @map("post_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  reactions Reaction[]

  @@map("comments")
}

enum ReactionType {
  LIKE
  DISLIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}

model Reaction {
  id        String       @id @default(uuid())
  type      ReactionType @map("type")
  user      User         @relation(fields: [userId], references: [id])
  userId    String       @map("user_id")
  post      Post         @relation(fields: [postId], references: [id])
  postId    String       @map("post_id")
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  Comment   Comment?     @relation(fields: [commentId], references: [id])
  commentId String?

  @@map("reactions")
}
